diff a/tests/test_api.py b/tests/test_api.py	(rejected hunks)
@@ -1,110 +1,58 @@
-"""Test suite for Pi-hole Suite API."""
-
+#!/usr/bin/env python3
+"""
+Test suite for Pi-hole Security Suite API
+"""
+from fastapi.testclient import TestClient
 import os
-import tempfile
-
+import sys
 import pytest
-from fastapi.testclient import TestClient
-
-# Set test environment before importing
-os.environ["SUITE_API_KEY"] = "test-api-key"
-os.environ["SUITE_DATA_DIR"] = tempfile.mkdtemp()
-
-from api.main import app
-from shared.db import init_db
-
-
-@pytest.fixture(scope="module")
-def setup_database():
-    init_db()
-    yield
-
-
-@pytest.fixture
-def client(setup_database):
-    return TestClient(app)
 
+# Add the parent directory to Python path to import start_suite
+sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
 
-@pytest.fixture
-def api_headers():
-    return {"X-API-Key": "test-api-key"}
+import start_suite
 
-
-def test_root_endpoint(client):
-    resp = client.get("/")
-    assert resp.status_code == 200
-    assert "message" in resp.json()
-
-
-def test_health_endpoint(client, api_headers):
-    resp = client.get("/health", headers=api_headers)
+def test_health():
+    """Test health endpoint (no auth required)"""
+    client = TestClient(start_suite.app)
+    resp = client.get("/health")
     assert resp.status_code == 200
     data = resp.json()
-    assert data["ok"] is True
-    assert "message" in data
-    assert "version" in data
-
-
-def test_health_endpoint_no_auth(client):
-    resp = client.get("/health")
+    assert data.get("status") == "ok"
+    assert data.get("api") == "running"
+    assert data.get("version") == "1.0.0"
+
+def test_info_requires_key():
+    """Test info endpoint requires API key"""
+    client = TestClient(start_suite.app)
+    
+    # Test without API key
+    resp = client.get("/info")
     assert resp.status_code == 401
-
-
-def test_health_endpoint_bad_auth(client):
-    resp = client.get("/health", headers={"X-API-Key": "wrong-key"})
+    
+    # Test with wrong API key
+    resp = client.get("/info", headers={"X-API-Key": "wrong-key"})
     assert resp.status_code == 401
 
-
-def test_dns_logs_endpoint(client, api_headers):
-    resp = client.get("/dns", headers=api_headers)
-    assert resp.status_code == 200
-    assert isinstance(resp.json(), list)
-
-
-def test_dns_logs_with_limit(client, api_headers):
-    resp = client.get("/dns?limit=10", headers=api_headers)
+def test_info_with_valid_key(monkeypatch):
+    """Test info endpoint with valid API key"""
+    # Set API key in environment
+    monkeypatch.setenv("SUITE_API_KEY", "test-secret-key")
+    
+    # Reload the app with new environment
+    import importlib
+    importlib.reload(start_suite)
+    
+    client = TestClient(start_suite.app)
+    resp = client.get("/info", headers={"X-API-Key": "test-secret-key"})
     assert resp.status_code == 200
+    
     data = resp.json()
-    assert isinstance(data, list)
-    assert len(data) <= 10
-
-
-def test_devices_endpoint(client, api_headers):
-    resp = client.get("/devices", headers=api_headers)
-    assert resp.status_code == 200
-    assert isinstance(resp.json(), list)
-
-
-def test_leases_endpoint(client, api_headers):
-    resp = client.get("/leases", headers=api_headers)
-    assert resp.status_code == 200
-    assert isinstance(resp.json(), list)
-
-
-def test_stats_endpoint(client, api_headers):
-    resp = client.get("/stats", headers=api_headers)
-    assert resp.status_code == 200
-    data = resp.json()
-    assert "total_dns_logs" in data
-    assert "total_devices" in data
-    assert "recent_queries" in data
-
-
-def test_device_request_validation():
-    from api.schemas import DeviceRequest
-
-    valid_data = {
-        "ip_address": "192.168.1.100",
-        "status": True,
-        "hostname": "test-device",
-        "mac_address": "aa:bb:cc:dd:ee:ff",
-    }
-    device_req = DeviceRequest(**valid_data)
-    assert device_req.ip_address == "192.168.1.100"
-    assert device_req.status is True
-
-    with pytest.raises(ValueError):
-        DeviceRequest(ip_address="invalid-ip", status=True)
-
-    with pytest.raises(ValueError):
-        DeviceRequest(ip_address="192.168.1.100", status=True, mac_address="invalid-mac")
+    assert "services" in data
+    assert "containers" in data
+    assert data.get("api_key_configured") is True
+
+def test_app_info():
+    """Test app metadata"""
+    assert start_suite.app.title == "Pi-hole Security Suite API"
+    assert start_suite.app.version == "1.0.0"
