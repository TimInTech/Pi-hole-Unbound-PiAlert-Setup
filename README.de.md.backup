# üõ°Ô∏è Pi-hole Security Suite (Ein-Klick-Installer)

Ein umfassender, produktionsreifer Installer f√ºr einen kompletten DNS-Sicherheitsstack:
- **üîí Unbound** - Rekursiver DNS-Resolver mit DNS-over-TLS (DoT) zu Quad9
- **üö´ Pi-hole** - Netzwerkweiter Werbeblocker und DNS-Sinkhole
- **üì° NetAlertX** - Netzwerkger√§teerkennung und -√ºberwachung  
- **‚ö° Python API Suite** - FastAPI-basierte √úberwachungs- und Verwaltungsschnittstelle

## ‚ö° Schnellstart

### Standard-Installation (Empfohlen)
```bash
git clone https://github.com/TimInTech/Pi-hole-Unbound-PiAlert-Setup.git
cd Pi-hole-Unbound-PiAlert-Setup
chmod +x install.sh
sudo ./install.sh
```

### Container-Modus (Pi-hole in Docker)
```bash
sudo ./install.sh --container-mode
```

### Erweiterte Optionen
```bash
# Unterbrochene Installation fortsetzen
sudo ./install.sh --resume

# Neuinstallation erzwingen (alle Zust√§nde zur√ºcksetzen)
sudo ./install.sh --force

# Testlauf (Aktionen vorschau ohne Ausf√ºhrung)
sudo ./install.sh --dry-run

# Docker-Konflikte automatisch entfernen
sudo ./install.sh --auto-remove-conflicts
```

## üöÄ Installations-Flags

| Flag | Beschreibung |
|------|--------------|
| `--container-mode` | Pi-hole in Docker mit Host-Netzwerk; NetAlertX in Docker |
| `--resume` | Installation vom letzten erfolgreichen Checkpoint fortsetzen |
| `--force` | Installationsstatus zur√ºcksetzen und alle Komponenten neu installieren |
| `--dry-run` | Installationsschritte vorschau ohne √Ñnderungen |
| `--auto-remove-conflicts` | Konfliktverursachende Docker-Pakete automatisch entfernen |

## üèóÔ∏è Architektur

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   Client DNS    ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ    Pi-hole      ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ    Unbound      ‚îÇ
‚îÇ   :53           ‚îÇ    ‚îÇ   :53/:8053     ‚îÇ    ‚îÇ     :5335       ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                                       ‚îÇ
                                                       ‚ñº
                                              ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
                                              ‚îÇ   Quad9 DoT     ‚îÇ
                                              ‚îÇ   :853          ‚îÇ
                                              ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   NetAlertX     ‚îÇ    ‚îÇ  Python API     ‚îÇ    ‚îÇ Verwaltungs-    ‚îÇ
‚îÇ   :20211        ‚îÇ    ‚îÇ    :8090        ‚îÇ    ‚îÇ schnittstelle   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

## üìã Was wird installiert

### Core DNS-Stack
- **Unbound**: Rekursiver DNS-Resolver auf `127.0.0.1:5335`
  - DNS-over-TLS (DoT) zu Quad9 (9.9.9.9) und Cloudflare (1.1.1.1)
  - DNSSEC-Validierung mit Vertrauensankern
  - Root-Hints f√ºr autoritative Aufl√∂sung
  - Datenschutzfokussierte Konfiguration

- **Pi-hole**: DNS-Sinkhole und Werbeblocker
  - **Host-Modus**: Nativer systemd-Service auf Port 53
  - **Container-Modus**: Docker-Container mit Host-Netzwerk
  - Konfiguriert zur Nutzung von Unbound als Upstream-DNS
  - Web-Admin-Interface mit generiertem Passwort

### Netzwerk√ºberwachung
- **NetAlertX**: Netzwerkger√§te-Erkennung und Benachrichtigungen
  - Docker-Container auf Port 20211
  - Persistente Konfigurations- und Datenbankspeicherung
  - Echtzeit-Netzwerkscan und Alarme

### Verwaltungs-API
- **Python Suite**: FastAPI-basierte Verwaltungsschnittstelle
  - Gesundheits√ºberwachungs-Endpunkte
  - Service-Status-Berichterstattung
  - API-Schl√ºssel-Authentifizierung
  - Systemd-Service (Host-Modus) oder Vordergrundprozess (Container-Modus)

## üîß Konfigurationsdetails

### DNS-Aufl√∂sungskette
1. **Client** ‚Üí Pi-hole (:53) ‚Üí Filtert Werbung/Malware
2. **Pi-hole** ‚Üí Unbound (:5335) ‚Üí Rekursive Aufl√∂sung
3. **Unbound** ‚Üí Quad9 DoT (:853) ‚Üí Verschl√ºsselte Upstream-Anfragen

### Sicherheitsfeatures
- DNS-over-TLS-Verschl√ºsselung f√ºr Upstream-Anfragen
- DNSSEC-Validierung f√ºr DNS-Integrit√§t
- Werbe- und Malware-Blockierung via Pi-hole-Blocklisten
- Netzwerkger√§te-√úberwachung und Benachrichtigungen
- API-Authentifizierung mit generierten Schl√ºsseln

### Persistenz & Wiederherstellung
- Zustandsbasierte Installation mit Checkpoint-Wiederherstellung
- Automatische Service-Neustart-Konfiguration
- Persistente Datenvolumes f√ºr Container
- Backup der urspr√ºnglichen System-DNS-Konfiguration

## üß™ Fehlerbehebung

### Port-Konflikte
Der Installer pr√ºft Port-Konflikte vor der Installation:
- **Port 53**: DNS (Pi-hole)
- **Port 5335**: Unbound rekursives DNS
- **Port 20211**: NetAlertX Web-Interface
- **Port 8090**: Python API Suite

### systemd-resolved (Ubuntu/Debian)
Auf Ubuntu-Systemen wird `systemd-resolved` automatisch deaktiviert, um Port 53 freizugeben:
```bash
sudo systemctl stop systemd-resolved
sudo systemctl disable systemd-resolved
```

**Urspr√ºngliches DNS-Verhalten wiederherstellen:**
```bash
sudo mv /etc/resolv.conf.bak /etc/resolv.conf
sudo systemctl enable --now systemd-resolved
```

### Service-Gesundheitspr√ºfungen
```bash
# Alle Services pr√ºfen
./check.sh

# Einzelne Service-Pr√ºfungen
systemctl status unbound pihole-FTL pihole-suite

# Container-Status
docker ps
docker logs pihole
docker logs netalertx

# DNS-Aufl√∂sungstests
dig @127.0.0.1 -p 5335 example.com +short  # Unbound testen
dig @127.0.0.1 google.com +short            # Pi-hole testen
```

### Protokolldateien
- **Installation**: `./install.log` und `./install_errors.log`
- **Unbound**: `journalctl -u unbound`
- **Pi-hole**: `journalctl -u pihole-FTL`
- **Python Suite**: `journalctl -u pihole-suite`
- **Container**: `docker logs [container_name]`

### H√§ufige Probleme

#### Docker-Berechtigungsfehler
```bash
sudo usermod -aG docker $USER
newgrp docker  # Oder abmelden/anmelden
```

#### DNS-Aufl√∂sungsfehler
```bash
# Unbound-Konfiguration pr√ºfen
sudo unbound-checkconf

# Vertrauensanker verifizieren
sudo unbound-anchor -v

# Upstream-Konnektivit√§t testen
dig @9.9.9.9 example.com +short
```

#### Pi-hole Admin-Zugang
```bash
# Generiertes Passwort abrufen (Container-Modus)
sudo docker logs pihole 2>&1 | grep "password:"

# Passwort zur√ºcksetzen (Host-Modus)
sudo pihole -a -p
```

## üîç API-Nutzung

Die Python Suite bietet eine REST-API f√ºr √úberwachung und Verwaltung:

```bash
# API-Schl√ºssel abrufen
API_KEY=$(grep SUITE_API_KEY .env | cut -d= -f2)

# Gesundheitspr√ºfung (keine Authentifizierung erforderlich)
curl http://127.0.0.1:8090/health

# Systeminformationen (API-Schl√ºssel erforderlich)
curl -H "X-API-Key: $API_KEY" http://127.0.0.1:8090/info
```

## üìä Leistung & √úberwachung

### DNS-Leistung
- **Unbound**: ~1-5ms lokale Cache-Treffer
- **Pi-hole**: ~10-50ms mit Filterung
- **Kalte Anfragen**: ~100-500ms (DoT zu Quad9)

### Ressourcenverbrauch
- **Unbound**: ~50MB RAM
- **Pi-hole**: ~100-200MB RAM
- **NetAlertX**: ~100-150MB RAM
- **Python Suite**: ~20-50MB RAM

### √úberwachungs-Endpunkte
- **Pi-hole Admin**: `http://[IHRE_IP]/admin/`
- **NetAlertX**: `http://[IHRE_IP]:20211/`
- **API Gesundheit**: `http://127.0.0.1:8090/health`
- **API Docs**: `http://127.0.0.1:8090/docs`

## üõ†Ô∏è Entwicklung

### Testen
```bash
# Alle Tests ausf√ºhren
./check.sh

# Nur Python-Tests
python3 -m pytest tests/ -v

# Code pr√ºfen
ruff check . --fix
```

### Manuelle Installationsschritte
```bash
# 1. Pakete installieren
sudo apt update && sudo apt install -y unbound pihole docker.io python3-venv

# 2. Unbound konfigurieren
sudo systemctl enable --now unbound

# 3. Pi-hole installieren
curl -sSL https://install.pi-hole.net | bash

# 4. Container einrichten
sudo docker run -d --name netalertx -p 20211:20211 jokobsk/netalertx:latest

# 5. Python-Suite starten
python3 -m venv venv
./venv/bin/pip install -r requirements.txt
./venv/bin/python start_suite.py
```

## üìù Lizenz

Dieses Projekt ist unter der MIT-Lizenz lizenziert - siehe die [LICENSE](LICENSE)-Datei f√ºr Details.

## ü§ù Mitwirken

1. Repository forken
2. Feature-Branch erstellen (`git checkout -b feature/verbesserung`)
3. √Ñnderungen testen (`./check.sh`)
4. √Ñnderungen committen (`git commit -am 'Verbesserung hinzuf√ºgen'`)
5. Auf Branch pushen (`git push origin feature/verbesserung`)
6. Pull Request erstellen

## üîó Verwandte Projekte

- [Pi-hole](https://pi-hole.net/) - Netzwerkweite Werbeblockierung
- [Unbound](https://nlnetlabs.nl/projects/unbound/) - Rekursiver DNS-Resolver
- [NetAlertX](https://github.com/jokob-sk/NetAlertX) - Netzwerk√ºberwachung
- [FastAPI](https://fastapi.tiangolo.com/) - Modernes Python-Web-Framework
